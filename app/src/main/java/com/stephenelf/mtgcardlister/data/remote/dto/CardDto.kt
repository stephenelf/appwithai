package com.stephenelf.mtgcardlister.data.remote.dto

import android.R.attr.name
import android.R.attr.text
import android.R.attr.type
import com.google.gson.annotations.SerializedName
import com.stephenelf.mtgcardlister.domain.model.Card

// Represents a single card object as received from the API.
data class CardDto(
    val id: String?,
    val name: String?,
    @SerializedName("manaCost") val manaCost: String?,
    val cmc: Double?,
    val colors: List<String>?,
    val type: String?,
    val rarity: String?,
    val set: String?,
    val text: String?,
    val artist: String?,
    val number: String?,
    val power: String?,
    val toughness: String?,
    val imageUrl: String?, // The URL for the card image
    val foreignNames: List<ForeignNameDto>?,
  //  val legalities: List<LegalityDto>?,
    val rulings: List<RulingDto>?,
    val printings: List<String>?,
    val originalText: String?,
    val originalType: String?,
    val multiverseid: String?, // Unique ID for the card
    val layout: String?,
    val names: List<String>?,
    val supertypes: List<String>?,
    val types: List<String>?,
    val subtypes: List<String>?,
    val variations: List<String>?,
    val watermark: String?,
    val border: String?,
    val timeshifted: Boolean?,
    val hand: String?,
    val life: String?,
    val reserved: Boolean?,
    val releaseDate: String?,
    val starter: Boolean?,
    val loyalty: String?,
    val frameEffect: String?,
    val frameEffects: List<String>?,
    val allParts: List<CardPartDto>?,
    val securityStamp: String?,
    val colorIdentity: List<String>?,
    val contentWarning: String?,
    val borderColor: String?,
    val edhrecRank: Int?,
    val leadershipSkills: LeadershipSkillsDto?,
    val promo: Boolean?,
    val promoTypes: List<String>?,
    val prices: PricesDto?,
    val purchaseUrls: PurchaseUrlsDto?,
    val finishes: List<String>?,
    val cardParts: List<CardPartDto>?,
    val flavorText: String?,
    val faceName: String?,
    val scryfallId: String?,
    val mtgoId: Int?,
    val mtgoFoilId: Int?,
    val tcgplayerProductId: Int?,
    val tcgplayerPurchaseUrl: String?,
    val cardKingdomId: String?,
    val cardKingdomFoilId: String?,
    val cardKingdomPurchaseUrl: String?,
    val cardmarketId: Int?,
    val cardmarketPurchaseUrl: String?,
    val uuid: String?,
    val variationss: List<String>?, // Typo in API?
    val reverseRelated: List<String>?,
    val hasFoil: Boolean?,
    val hasNonFoil: Boolean?,
    val isOnlineOnly: Boolean?,
    val isOversized: Boolean?,
    val isPromo: Boolean?,
    val isReprint: Boolean?,
    val isReserved: Boolean?,
    val isStarter: Boolean?,
    val isTimeshifted: Boolean?,
    val isFullArt: Boolean?,
    val isTextless: Boolean?,
    val isStorySpotlight: Boolean?,
    val isAlternativeArt: Boolean?,
    val isFoundInBooster: Boolean?,
    val isOnline: Boolean?,
    val isPaper: Boolean?,
    val isMtgo: Boolean?,
    val isArena: Boolean?,
    val isDigital: Boolean?,
    val isFoil: Boolean?,
    val isNonFoil: Boolean?,
    val isOversizedCard: Boolean?,
    val isPromoCard: Boolean?,
    val isReprintCard: Boolean?,
    val isReservedCard: Boolean?,
    val isStarterCard: Boolean?,
    val isTimeshiftedCard: Boolean?,
    val isFullArtCard: Boolean?,
    val isTextlessCard: Boolean?,
    val isStorySpotlightCard: Boolean?,
    val isAlternativeArtCard: Boolean?,
    val isFoundInBoosterCard: Boolean?,
    val isOnlineCard: Boolean?,
    val isPaperCard: Boolean?,
    val isMtgoCard: Boolean?,
    val isArenaCard: Boolean?,
    val isDigitalCard: Boolean?,
    val isFoilCard: Boolean?,
    val isNonFoilCard: Boolean?,
    val isOversizedCardCard: Boolean?,
    val isPromoCardCard: Boolean?,
    val isReprintCardCard: Boolean?,
    val isReservedCardCard: Boolean?,
    val isStarterCardCard: Boolean?,
    val isTimeshiftedCardCard: Boolean?,
    val isFullArtCardCard: Boolean?,
    val isTextlessCardCard: Boolean?,
    val isStorySpotlightCardCard: Boolean?,
    val isAlternativeArtCardCard: Boolean?,
    val isFoundInBoosterCardCard: Boolean?,
    val isOnlineCardCard: Boolean?,
    val isPaperCardCard: Boolean?,
    val isMtgoCardCard: Boolean?,
    val isArenaCardCard: Boolean?,
    val isDigitalCardCard: Boolean?,
    val isFoilCardCard: Boolean?,
    val isNonFoilCardCard: Boolean?,
    val isOversizedCardCardCard: Boolean?,
    val isPromoCardCardCard: Boolean?,
    val isReprintCardCardCard: Boolean?,
    val isReservedCardCardCard: Boolean?,
    val isStarterCardCardCard: Boolean?,
    val isTimeshiftedCardCardCard: Boolean?,
    val isFullArtCardCardCard: Boolean?,
    val isTextlessCardCardCard: Boolean?,
    val isStorySpotlightCardCardCard: Boolean?,
    val isAlternativeArtCardCardCard: Boolean?,
    val isFoundInBoosterCardCardCard: Boolean?,
    val isOnlineCardCardCard: Boolean?,
    val isPaperCardCardCard: Boolean?,
    val isMtgoCardCardCard: Boolean?,
    val isArenaCardCardCard: Boolean?,
    val isDigitalCardCardCard: Boolean?,
    val isFoilCardCardCard: Boolean?,
    val isNonFoilCardCardCard: Boolean?,
    val isOversizedCardCardCardCard: Boolean?,
    val isPromoCardCardCardCard: Boolean?,
    val isReprintCardCardCardCard: Boolean?,
    val isReservedCardCardCardCard: Boolean?,
    val isStarterCardCardCardCard: Boolean?,
    val isTimeshiftedCardCardCardCard: Boolean?,
    val isFullArtCardCardCardCard: Boolean?,
    val isTextlessCardCardCardCard: Boolean?,
    val isStorySpotlightCardCardCardCard: Boolean?,
    val isAlternativeArtCardCardCardCard: Boolean?,
    val isFoundInBoosterCardCardCardCard: Boolean?,
    val isOnlineCardCardCardCard: Boolean?,
    val isPaperCardCardCardCard: Boolean?,
    val isMtgoCardCardCardCard: Boolean?,
    val isArenaCardCardCardCard: Boolean?,
    val isDigitalCardCardCardCard: Boolean?
){
/**
 * Maps a [CardDto] to a [Card] domain model.
 * This ensures that the domain layer only deals with clean, application-specific models,
 * decoupling it from the API's specific data structure.
 */
fun toCard(): Card {
    return Card(
        id = id ?: "",
        name = name ?: "Unknown Card",
        type = type ?: "Unknown Type",
        set = set ?: "Unknown Set",
        imageUrl = imageUrl, // imageUrl can be null, handled in UI
        text = text ?: "",
        artist = artist ?: "",
        rarity = rarity ?: "",
        flavorText = flavorText ?: "",
    )
}
}
